{
 "Resources": {
  "DomainIdentity034B48F5": {
   "Type": "AWS::SES::EmailIdentity",
   "Properties": {
    "DkimAttributes": {
     "SigningEnabled": true
    },
    "EmailIdentity": "gabi.yoga",
    "MailFromAttributes": {
     "MailFromDomain": "mail.gabi.yoga"
    }
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/DomainIdentity/Resource"
   }
  },
  "EmailServicesRoleB191F97C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "IAM role for accessing email services",
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSESFullAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonWorkMailFullAccess"
       ]
      ]
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ses:SendEmail",
          "ses:SendRawEmail",
          "ses:SendTemplatedEmail",
          "workmail:*"
         ],
         "Effect": "Allow",
         "Resource": "*",
         "Sid": "AllowEmailServices"
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "EmailPolicy"
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/EmailServicesRole/Resource"
   }
  },
  "WorkMailOrgFunctionServiceRole684D894F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSESFullAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonWorkMailFullAccess"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/WorkMailOrgFunction/ServiceRole/Resource"
   }
  },
  "WorkMailOrgFunctionServiceRoleDefaultPolicyE06D1392": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ds:*",
        "ses:*",
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeAvailabilityZones",
        "route53:*"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "WorkMailOrgFunctionServiceRoleDefaultPolicyE06D1392",
    "Roles": [
     {
      "Ref": "WorkMailOrgFunctionServiceRole684D894F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/WorkMailOrgFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "WorkMailOrgFunctionCA7380EE": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\n        const AWS = require('aws-sdk');\n        const workmail = new AWS.WorkMail({ region: process.env.AWS_REGION });\n        \n        exports.handler = async (event) => {\n          console.log('Event:', JSON.stringify(event, null, 2));\n          \n          if (event.RequestType === 'Create') {\n            try {\n              // Create WorkMail organization - don't set DirectoryId\n              const createOrgResult = await workmail.createOrganization({\n                Alias: event.ResourceProperties.OrganizationName\n              }).promise();\n              \n              // Now register the domain separately\n              try {\n                await workmail.registerDomain({\n                  OrganizationId: createOrgResult.OrganizationId,\n                  DomainName: event.ResourceProperties.DomainName\n                }).promise();\n                console.log('Domain registered for organization');\n              } catch (domainError) {\n                console.error('Error registering domain:', domainError);\n                // Continue as domain might be added later manually\n              }\n              \n              console.log('Organization created with ID:', createOrgResult.OrganizationId);\n              \n              return {\n                PhysicalResourceId: createOrgResult.OrganizationId,\n                Data: {\n                  OrganizationId: createOrgResult.OrganizationId\n                }\n              };\n            } catch (error) {\n              console.error('Error creating WorkMail organization:', error);\n              throw error;\n            }\n          } else if (event.RequestType === 'Delete') {\n            try {\n              // Only attempt to delete if it's a valid ID pattern\n              if (event.PhysicalResourceId && event.PhysicalResourceId.match(/^m-[0-9a-f]{32}$/)) {\n                await workmail.deleteOrganization({\n                  OrganizationId: event.PhysicalResourceId,\n                  DeleteDirectory: false\n                }).promise();\n                console.log('Organization deleted');\n              } else {\n                console.log('Not attempting to delete invalid organization ID:', event.PhysicalResourceId);\n              }\n              \n              return {\n                PhysicalResourceId: event.PhysicalResourceId\n              };\n            } catch (error) {\n              console.error('Error deleting WorkMail organization:', error);\n              // Don't throw on delete to allow stack cleanup\n              return {\n                PhysicalResourceId: event.PhysicalResourceId\n              };\n            }\n          } else { // Update\n            return {\n              PhysicalResourceId: event.PhysicalResourceId,\n              Data: {\n                OrganizationId: event.PhysicalResourceId\n              }\n            };\n          }\n        };\n      "
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "WorkMailOrgFunctionServiceRole684D894F",
      "Arn"
     ]
    },
    "Runtime": "nodejs16.x",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "Timeout": 300
   },
   "DependsOn": [
    "WorkMailOrgFunctionServiceRoleDefaultPolicyE06D1392",
    "WorkMailOrgFunctionServiceRole684D894F"
   ],
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/WorkMailOrgFunction/Resource"
   }
  },
  "WorkMailOrgProviderframeworkonEventServiceRole516A7148": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/WorkMailOrgProvider/framework-onEvent/ServiceRole/Resource"
   }
  },
  "WorkMailOrgProviderframeworkonEventServiceRoleDefaultPolicy5F5BC5FD": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "WorkMailOrgFunctionCA7380EE",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WorkMailOrgFunctionCA7380EE",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:GetFunction",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "WorkMailOrgFunctionCA7380EE",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "WorkMailOrgProviderframeworkonEventServiceRoleDefaultPolicy5F5BC5FD",
    "Roles": [
     {
      "Ref": "WorkMailOrgProviderframeworkonEventServiceRole516A7148"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/WorkMailOrgProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "WorkMailOrgProviderframeworkonEvent638B397C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-891709159344-us-west-2",
     "S3Key": "bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca.zip"
    },
    "Description": "AWS CDK resource provider framework - onEvent (GabiYogaEmail/WorkMailOrgProvider)",
    "Environment": {
     "Variables": {
      "USER_ON_EVENT_FUNCTION_ARN": {
       "Fn::GetAtt": [
        "WorkMailOrgFunctionCA7380EE",
        "Arn"
       ]
      }
     }
    },
    "FunctionName": "GabiYogaEmail-WorkMailOrgProviderFn",
    "Handler": "framework.onEvent",
    "Role": {
     "Fn::GetAtt": [
      "WorkMailOrgProviderframeworkonEventServiceRole516A7148",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "Timeout": 900
   },
   "DependsOn": [
    "WorkMailOrgProviderframeworkonEventServiceRoleDefaultPolicy5F5BC5FD",
    "WorkMailOrgProviderframeworkonEventServiceRole516A7148"
   ],
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/WorkMailOrgProvider/framework-onEvent/Resource",
    "aws:asset:path": "asset.bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "WorkMailOrganization": {
   "Type": "AWS::CloudFormation::CustomResource",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "WorkMailOrgProviderframeworkonEvent638B397C",
      "Arn"
     ]
    },
    "OrganizationName": "gabi-yoga-mail-org",
    "DomainName": "gabi.yoga"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/WorkMailOrganization/Default"
   }
  },
  "AutodiscoverCnameRecordA0525C4A": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "HostedZoneId": "Z0858162FM97J2FO2QJU",
    "Name": "autodiscover.gabi.yoga.",
    "ResourceRecords": [
     "autodiscover.mail.us-west-2.awsapps.com"
    ],
    "TTL": "1800",
    "Type": "CNAME"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/AutodiscoverCnameRecord/Resource"
   }
  },
  "MailFromMxRecord8EEC6CE6": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "HostedZoneId": "Z0858162FM97J2FO2QJU",
    "Name": "mail.gabi.yoga.",
    "ResourceRecords": [
     "10 feedback-smtp.us-west-2.amazonses.com"
    ],
    "TTL": "1800",
    "Type": "MX"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/MailFromMxRecord/Resource"
   }
  },
  "MailFromSpfRecordA9EAF20E": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "HostedZoneId": "Z0858162FM97J2FO2QJU",
    "Name": "mail.gabi.yoga.",
    "ResourceRecords": [
     "\"v=spf1 include:amazonses.com ~all\""
    ],
    "TTL": "1800",
    "Type": "TXT"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/MailFromSpfRecord/Resource"
   }
  },
  "WorkMailMxRecordC7A0CDD3": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "HostedZoneId": "Z0858162FM97J2FO2QJU",
    "Name": "gabi.yoga.",
    "ResourceRecords": [
     "10 inbound-smtp.us-west-2.amazonaws.com"
    ],
    "TTL": "1800",
    "Type": "MX"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/WorkMailMxRecord/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WQQUsDMRCFf0vvs6PdIujRlgoexLL1vqTJWNLdJJJJaiXkv5vNVkUIvC/zHhleWlw+tHi7EJ/cSDU0oz5g2gchB+iIXfSSoHh9YmJMWyP0+KzIBh2+YPNu/w0yaGEwdW6kyau6c6OWNTpThlGYgxKYnqKVQTs7eT+cgVe9YKbA+DhJueM6yoHCWjCBdzHQ3QrTxgpDHUnnVV1VaV/yL5fr9O0SZsoZZOTgTO+vhRh33p21Ig91Sal71PYImxr7rV3f/ePXGD5iyGCdIjzxzXl5j+W0ixNr3fhYvsAQdrN+A5/BH6dXAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaEmail/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "WorkMailOrganizationID": {
   "Description": "WorkMail Organization ID",
   "Value": {
    "Fn::GetAtt": [
     "WorkMailOrganization",
     "OrganizationId"
    ]
   }
  },
  "WorkMailConsoleURL": {
   "Description": "WorkMail Console URL",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://us-west-2.console.aws.amazon.com/workmail/v2/home?region=us-west-2#/organizations/",
      {
       "Fn::GetAtt": [
        "WorkMailOrganization",
        "OrganizationId"
       ]
      }
     ]
    ]
   }
  },
  "WorkMailSetupInstructions": {
   "Description": "Amazon WorkMail Setup Instructions",
   "Value": {
    "Fn::Join": [
     "",
     [
      "\n========== AMAZON WORKMAIL SETUP INSTRUCTIONS ==========\n\nTo complete the WorkMail setup for gabi.yoga:\n\n1. Go to the WorkMail Console:\n   https://us-west-2.console.aws.amazon.com/workmail/v2/home?region=us-west-2#/organizations/",
      {
       "Fn::GetAtt": [
        "WorkMailOrganization",
        "OrganizationId"
       ]
      },
      "\n\n2. Complete domain verification if required:\n   - In the navigation pane, choose \"Domains\"\n   - Select gabi.yoga\n   - Follow the steps to verify ownership if needed\n\n3. Create user accounts:\n   - In the navigation pane, choose \"Users\"\n   - Click \"Create user\"\n   - Create accounts like:\n     * info@gabi.yoga\n     * admin@gabi.yoga\n     * your-name@gabi.yoga\n\n4. Access WorkMail:\n   - After creating users, you can access WorkMail at:\n     https://mail.us-west-2.awsapps.com/mail\n\n5. Update your domain's SPF record:\n   - You need to manually update the existing SPF record for your domain\n   - Find your existing TXT record with \"v=spf1\" at the beginning\n   - Add \"include:mail.us-west-2.awsapps.com\" before the \"~all\" or \"-all\" at the end\n   - Example: \"v=spf1 include:amazonses.com include:mail.us-west-2.awsapps.com ~all\"\n   - This step is crucial for email deliverability\n\n6. Set up email clients:\n   - Users can set up any email client using their WorkMail credentials\n   - IMAP, POP3, and SMTP settings will be provided in the WorkMail console\n   - Mobile apps can also be configured with these settings\n\nThe following DNS records have been automatically set up:\n- MX record for receiving email (domain -> inbound-smtp.us-west-2.amazonaws.com)\n- MX record for SES mail-from domain (mail subdomain -> feedback-smtp)\n- Autodiscover record for email client configuration\n- Additional mail-from SPF record\n\nNote: Domain SPF record needs manual update as explained in step 5.\n      "
     ]
    ]
   }
  },
  "SesIdentityArn": {
   "Description": "SES domain identity ARN (for sending emails)",
   "Value": {
    "Fn::Join": [
     "",
     [
      "arn:",
      {
       "Ref": "AWS::Partition"
      },
      ":ses:us-west-2:891709159344:identity/",
      {
       "Ref": "DomainIdentity034B48F5"
      }
     ]
    ]
   }
  },
  "EmailServicesRoleArn": {
   "Description": "IAM role ARN for accessing email services",
   "Value": {
    "Fn::GetAtt": [
     "EmailServicesRoleB191F97C",
     "Arn"
    ]
   }
  },
  "ExportsOutputFnGetAttWorkMailOrganizationOrganizationIdC3A111A2": {
   "Value": {
    "Fn::GetAtt": [
     "WorkMailOrganization",
     "OrganizationId"
    ]
   },
   "Export": {
    "Name": "GabiYogaEmail:ExportsOutputFnGetAttWorkMailOrganizationOrganizationIdC3A111A2"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}