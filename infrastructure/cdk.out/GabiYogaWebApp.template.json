{
 "Resources": {
  "WebSecurityGroup73AF7387": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Security group for web servers",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow HTTP",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow HTTPS",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow SSH",
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "VpcId": {
     "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcA59DDC1394F0D6DE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/WebSecurityGroup/Resource"
   }
  },
  "WebSecurityGroupfromGabiYogaWebAppWebSecurityGroupB8A6BA725001EDDCF558": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Load balancer to target",
    "FromPort": 5001,
    "GroupId": {
     "Fn::GetAtt": [
      "WebSecurityGroup73AF7387",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "WebSecurityGroup73AF7387",
      "GroupId"
     ]
    },
    "ToPort": 5001
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/WebSecurityGroup/from GabiYogaWebAppWebSecurityGroupB8A6BA72:5001"
   }
  },
  "WebServerRole42ABA571": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonS3ReadOnlyAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/CloudWatchAgentServerPolicy"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/WebServerRole/Resource"
   }
  },
  "WebServerRoleDefaultPolicy9AFE19CE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::gabi-yoga-uploads"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::gabi-yoga-uploads/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "WebServerRoleDefaultPolicy9AFE19CE",
    "Roles": [
     {
      "Ref": "WebServerRole42ABA571"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/WebServerRole/DefaultPolicy/Resource"
   }
  },
  "LoadBalancerBE9EEC3A": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "WebSecurityGroup73AF7387",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcpublicSubnet1Subnet46DE1B152A307906"
     },
     {
      "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcpublicSubnet2SubnetFC1D66542206F900"
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "Type": "application"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/LoadBalancer/Resource"
   }
  },
  "LoadBalancerHttpListener22970844": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "RedirectConfig": {
       "Port": "443",
       "Protocol": "HTTPS",
       "StatusCode": "HTTP_301"
      },
      "Type": "redirect"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "LoadBalancerBE9EEC3A"
    },
    "Port": 80,
    "Protocol": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/LoadBalancer/HttpListener/Resource"
   }
  },
  "LoadBalancerHttpListenerWebTargetGroup156743A2": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/api/health",
    "HealthCheckTimeoutSeconds": 5,
    "HealthyThresholdCount": 2,
    "Port": 5001,
    "Protocol": "HTTP",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "instance",
    "UnhealthyThresholdCount": 5,
    "VpcId": {
     "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcA59DDC1394F0D6DE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/LoadBalancer/HttpListener/WebTargetGroup/Resource"
   }
  },
  "LoadBalancerHttpsListener583C7712": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "Certificates": [
     {
      "CertificateArn": {
       "Fn::ImportValue": "GabiYogaDns:ExportsOutputRefCertificate4E7ABB08F7C8AF50"
      }
     }
    ],
    "DefaultActions": [
     {
      "TargetGroupArn": {
       "Ref": "LoadBalancerHttpsListenerHttpsWebTargetGroup7A821C28"
      },
      "Type": "forward"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "LoadBalancerBE9EEC3A"
    },
    "Port": 443,
    "Protocol": "HTTPS",
    "SslPolicy": "ELBSecurityPolicy-2016-08"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/LoadBalancer/HttpsListener/Resource"
   }
  },
  "LoadBalancerHttpsListenerHttpsWebTargetGroup7A821C28": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 30,
    "HealthCheckPath": "/api/health",
    "HealthCheckTimeoutSeconds": 5,
    "HealthyThresholdCount": 2,
    "Port": 5001,
    "Protocol": "HTTP",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "instance",
    "UnhealthyThresholdCount": 5,
    "VpcId": {
     "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcA59DDC1394F0D6DE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/LoadBalancer/HttpsListener/HttpsWebTargetGroup/Resource"
   }
  },
  "WebServerLaunchTemplateProfile90C47AD5": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "WebServerRole42ABA571"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/WebServerLaunchTemplate/Profile"
   }
  },
  "WebServerLaunchTemplateF0B86FE6": {
   "Type": "AWS::EC2::LaunchTemplate",
   "Properties": {
    "LaunchTemplateData": {
     "IamInstanceProfile": {
      "Arn": {
       "Fn::GetAtt": [
        "WebServerLaunchTemplateProfile90C47AD5",
        "Arn"
       ]
      }
     },
     "ImageId": {
      "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amikernel510hvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
     },
     "InstanceType": "t2.micro",
     "SecurityGroupIds": [
      {
       "Fn::GetAtt": [
        "WebSecurityGroup73AF7387",
        "GroupId"
       ]
      }
     ],
     "TagSpecifications": [
      {
       "ResourceType": "instance",
       "Tags": [
        {
         "Key": "Environment",
         "Value": "Production"
        },
        {
         "Key": "Name",
         "Value": "GabiYogaWebApp/WebServerLaunchTemplate"
        },
        {
         "Key": "Project",
         "Value": "GabiYoga"
        }
       ]
      },
      {
       "ResourceType": "volume",
       "Tags": [
        {
         "Key": "Environment",
         "Value": "Production"
        },
        {
         "Key": "Name",
         "Value": "GabiYogaWebApp/WebServerLaunchTemplate"
        },
        {
         "Key": "Project",
         "Value": "GabiYoga"
        }
       ]
      }
     ],
     "UserData": {
      "Fn::Base64": {
       "Fn::Join": [
        "",
        [
         "#!/bin/bash\necho \"Starting user data script execution at $(date)\"\nset -x\nyum update -y\nyum install -y mysql git mariadb-client\necho \"Installing NVM...\"\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"\necho \"Sourcing bash profiles to enable NVM\"\nsource ~/.bashrc || source ~/.bash_profile || true\nnvm install 16\nnvm use 16\nnvm alias default 16\necho \"Creating system-wide Node.js symlinks\"\nNODE_PATH=\"$HOME/.nvm/versions/node/v16.20.2/bin/node\"\nNPM_PATH=\"$HOME/.nvm/versions/node/v16.20.2/bin/npm\"\n[ -f \"$NODE_PATH\" ] || NODE_PATH=\"$(find $HOME/.nvm/versions/node -name node -type f | head -n 1)\"\n[ -f \"$NPM_PATH\" ] || NPM_PATH=\"$(find $HOME/.nvm/versions/node -name npm -type f | head -n 1)\"\necho \"Node path: $NODE_PATH\"\necho \"NPM path: $NPM_PATH\"\nif [ -L \"/usr/bin/node\" ]; then rm -f /usr/bin/node; fi\nif [ -L \"/usr/bin/npm\" ]; then rm -f /usr/bin/npm; fi\nif [ -L \"/usr/local/bin/node\" ]; then rm -f /usr/local/bin/node; fi\nif [ -L \"/usr/local/bin/npm\" ]; then rm -f /usr/local/bin/npm; fi\nln -sf \"$NODE_PATH\" /usr/bin/node\nln -sf \"$NPM_PATH\" /usr/bin/npm\nln -sf \"$NODE_PATH\" /usr/local/bin/node\nln -sf \"$NPM_PATH\" /usr/local/bin/npm\nls -la /usr/bin/node || echo \"Failed to create symlink\"\necho \"export NVM_DIR=\\\"\\$HOME/.nvm\\\"\" >> /etc/profile.d/nvm.sh\necho \"[ -s \\\"\\$NVM_DIR/nvm.sh\\\" ] && \\\\. \\\"\\$NVM_DIR/nvm.sh\\\"\" >> /etc/profile.d/nvm.sh\necho \"[ -s \\\"\\$NVM_DIR/bash_completion\\\" ] && \\\\. \\\"\\$NVM_DIR/bash_completion\\\"\" >> /etc/profile.d/nvm.sh\nchmod +x /etc/profile.d/nvm.sh\nmkdir -p /var/www/gabiyoga\necho \"Cloning application repository...\"\ngit clone https://github.com/jlandron/GabiYogaWebsite.git /var/www/gabiyoga-temp\nif [ $? -eq 0 ]; then\n  cp -R /var/www/gabiyoga-temp/* /var/www/gabiyoga/\n  cp -R /var/www/gabiyoga-temp/.* /var/www/gabiyoga/ 2>/dev/null || echo \"No hidden files to copy\"\n  rm -rf /var/www/gabiyoga-temp\n  echo \"✅ Repository cloned successfully\"\nelse\n  echo \"⚠️ Repository clone failed, creating minimal application\"\n  # Create server.js file\n  cat > /var/www/gabiyoga/server.js << 'EOF'\n// Minimal Express server for Gabi Yoga\nconst express = require('express');\nconst app = express();\nconst port = process.env.PORT || 5001;\n\n// Middleware\napp.use(express.json());\napp.use(express.static('public'));\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'ok', message: 'Server is running' });\n});\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\nEOF\n\n  # Create package.json\n  cat > /var/www/gabiyoga/package.json << 'EOF'\n{\n  \"name\": \"gabi-yoga\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Gabi Yoga Web Application\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}\nEOF\n\n  # Create public directory and index.html\n  mkdir -p /var/www/gabiyoga/public\n  echo \"<!DOCTYPE html><html><body><h1>Gabi Yoga</h1><p>Server is running</p></body></html>\" > /var/www/gabiyoga/public/index.html\nfi\ncat > /var/www/gabiyoga/.env << EOF\nNODE_ENV=production\nPORT=5001\nDB_HOST=gabiyogadatabase-databaseb269d8bb-tfil5ifuv2c3.cxq64wemez5f.us-west-2.rds.amazonaws.com\nDB_PORT=3306\nDB_NAME=yoga\nDB_USER=admin\nDB_PASSWORD=8O4Lfa8tq10wgAg8\nAWS_REGION=us-west-2\nS3_BUCKET_NAME=gabi-yoga-uploads\nCLOUDFRONT_DISTRIBUTION_ID=",
         {
          "Fn::ImportValue": "GabiYogaStorage:ExportsOutputRefDistribution830FAC524DF81588"
         },
         "\nEOF\ncd /var/www/gabiyoga\nnpm install --production\ncat > /etc/systemd/system/gabiyoga.service << EOF\n[Unit]\nDescription=Gabi Yoga Web Application\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nWorkingDirectory=/var/www/gabiyoga\nExecStart=$NODE_PATH /var/www/gabiyoga/server.js\nRestart=on-failure\nRestartSec=10\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=gabiyoga\nEnvironment=NODE_ENV=production\n\n[Install]\nWantedBy=multi-user.target\nEOF\necho \"Created systemd service with Node.js path: $NODE_PATH\"\nsystemctl daemon-reload\nsystemctl enable gabiyoga\nsystemctl start gabiyoga\necho \"Gabi Yoga web application startup completed\"\necho \"User data script completed at $(date)\""
        ]
       ]
      }
     }
    },
    "TagSpecifications": [
     {
      "ResourceType": "launch-template",
      "Tags": [
       {
        "Key": "Environment",
        "Value": "Production"
       },
       {
        "Key": "Name",
        "Value": "GabiYogaWebApp/WebServerLaunchTemplate"
       },
       {
        "Key": "Project",
        "Value": "GabiYoga"
       }
      ]
     }
    ]
   },
   "DependsOn": [
    "WebServerRoleDefaultPolicy9AFE19CE",
    "WebServerRole42ABA571"
   ],
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/WebServerLaunchTemplate/Resource"
   }
  },
  "WebServerASG5A722E5A": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "DesiredCapacity": "1",
    "LaunchTemplate": {
     "LaunchTemplateId": {
      "Ref": "WebServerLaunchTemplateF0B86FE6"
     },
     "Version": {
      "Fn::GetAtt": [
       "WebServerLaunchTemplateF0B86FE6",
       "LatestVersionNumber"
      ]
     }
    },
    "MaxSize": "1",
    "MinSize": "1",
    "Tags": [
     {
      "Key": "Environment",
      "PropagateAtLaunch": true,
      "Value": "Production"
     },
     {
      "Key": "Project",
      "PropagateAtLaunch": true,
      "Value": "GabiYoga"
     }
    ],
    "TargetGroupARNs": [
     {
      "Ref": "LoadBalancerHttpListenerWebTargetGroup156743A2"
     },
     {
      "Ref": "LoadBalancerHttpsListenerHttpsWebTargetGroup7A821C28"
     }
    ],
    "VPCZoneIdentifier": [
     {
      "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcpublicSubnet1Subnet46DE1B152A307906"
     },
     {
      "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcpublicSubnet2SubnetFC1D66542206F900"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/WebServerASG/ASG"
   }
  },
  "WebServerASGScalingPolicyCpuScalingEE12A730": {
   "Type": "AWS::AutoScaling::ScalingPolicy",
   "Properties": {
    "AutoScalingGroupName": {
     "Ref": "WebServerASG5A722E5A"
    },
    "Cooldown": "300",
    "PolicyType": "TargetTrackingScaling",
    "TargetTrackingConfiguration": {
     "PredefinedMetricSpecification": {
      "PredefinedMetricType": "ASGAverageCPUUtilization"
     },
     "TargetValue": 70
    }
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/WebServerASG/ScalingPolicyCpuScaling/Resource"
   }
  },
  "WebAppLogs91210B48": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "RetentionInDays": 14,
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/WebAppLogs/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/31QzWrDMAx+lt4db81pO247jEKgIc19qK6auXXsYMsdJfjdpyZtkzIYGKTvR5KlXC5fc/m8gJ+Qqd0xM3or+w2BOgqmvnpUOWNU0Ws6f3oXO/Gxt/8TK9t4DEEUEK36rrHtDBBebI9MEhpa2VfODOIQS2e0Ol/glK1sILAKS+/22nAZGgiklXGw24JhSdvmxP986zquAdLOFqy9Dxr6YfIcz306ENqr55bP9Bp8g3TfcwaTgEguKDA8nWcz2Izg7v7DjeW15/Myd5WmRR+IJIxrguwLNzW85SmJCoOLXg2XK8FDizRusY7URUrCuh3KQ3g6LV8kv3xxCFpnPlrSLcpqjL+hJ2+F/wEAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaWebApp/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amikernel510hvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Outputs": {
  "LoadBalancerDNS": {
   "Description": "Load balancer DNS name",
   "Value": {
    "Fn::GetAtt": [
     "LoadBalancerBE9EEC3A",
     "DNSName"
    ]
   }
  },
  "WebServerSecurityGroup": {
   "Description": "Web server security group ID",
   "Value": {
    "Fn::GetAtt": [
     "WebSecurityGroup73AF7387",
     "GroupId"
    ]
   }
  },
  "DeploymentInstructions": {
   "Description": "Follow-up instructions for deployment",
   "Value": "Replace placeholders in user data script and update your application code"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}