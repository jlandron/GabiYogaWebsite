{
 "Resources": {
  "DatabaseSecurityGroup7319C0F6": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Allow database connections",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputFnGetAttGabiYogaFreeVpcA59DDC13CidrBlock668DB7C5"
      },
      "Description": "Allow MySQL connections from within the VPC",
      "FromPort": 3306,
      "IpProtocol": "tcp",
      "ToPort": 3306
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "VpcId": {
     "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcA59DDC1394F0D6DE"
    }
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/DatabaseSecurityGroup/Resource"
   }
  },
  "DatabaseCredentials8547B3E7": {
   "Type": "AWS::SecretsManager::Secret",
   "Properties": {
    "GenerateSecretString": {
     "ExcludePunctuation": true,
     "GenerateStringKey": "password",
     "IncludeSpace": false,
     "PasswordLength": 16,
     "SecretStringTemplate": "{\"username\":\"admin\"}"
    },
    "Name": "gabi-yoga-db-credentials",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/DatabaseCredentials/Resource"
   }
  },
  "DatabaseCredentialsAttachment7BAB329F": {
   "Type": "AWS::SecretsManager::SecretTargetAttachment",
   "Properties": {
    "SecretId": {
     "Ref": "DatabaseCredentials8547B3E7"
    },
    "TargetId": {
     "Ref": "DatabaseB269D8BB"
    },
    "TargetType": "AWS::RDS::DBInstance"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/DatabaseCredentials/Attachment/Resource"
   }
  },
  "DatabaseSubnetGroup7D60F180": {
   "Type": "AWS::RDS::DBSubnetGroup",
   "Properties": {
    "DBSubnetGroupDescription": "Subnet group for Database database",
    "SubnetIds": [
     {
      "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcisolatedSubnet1Subnet38080C97B84B7E08"
     },
     {
      "Fn::ImportValue": "GabiYogaNetwork:ExportsOutputRefGabiYogaFreeVpcisolatedSubnet2Subnet5F4D55DA777E03BA"
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/Database/SubnetGroup/Default"
   }
  },
  "DatabaseB269D8BB": {
   "Type": "AWS::RDS::DBInstance",
   "Properties": {
    "AllocatedStorage": "20",
    "AllowMajorVersionUpgrade": false,
    "AutoMinorVersionUpgrade": true,
    "BackupRetentionPeriod": 1,
    "CopyTagsToSnapshot": true,
    "DBInstanceClass": "db.t4g.micro",
    "DBName": "yoga",
    "DBSubnetGroupName": {
     "Ref": "DatabaseSubnetGroup7D60F180"
    },
    "DeleteAutomatedBackups": true,
    "DeletionProtection": false,
    "Engine": "mysql",
    "EngineVersion": "8.0",
    "MasterUserPassword": {
     "Fn::Join": [
      "",
      [
       "{{resolve:secretsmanager:",
       {
        "Ref": "DatabaseCredentials8547B3E7"
       },
       ":SecretString:password::}}"
      ]
     ]
    },
    "MasterUsername": {
     "Fn::Join": [
      "",
      [
       "{{resolve:secretsmanager:",
       {
        "Ref": "DatabaseCredentials8547B3E7"
       },
       ":SecretString:username::}}"
      ]
     ]
    },
    "MaxAllocatedStorage": 20,
    "MultiAZ": false,
    "PubliclyAccessible": false,
    "StorageType": "gp2",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "VPCSecurityGroups": [
     {
      "Fn::GetAtt": [
       "DatabaseSecurityGroup7319C0F6",
       "GroupId"
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Snapshot",
   "DeletionPolicy": "Snapshot",
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/Database/Resource"
   }
  },
  "SetupMysqlUsersFunctionServiceRole080F9ABB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/SetupMysqlUsersFunction/ServiceRole/Resource"
   }
  },
  "SetupMysqlUsersFunctionServiceRoleDefaultPolicyB1808503": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret"
       ],
       "Effect": "Allow",
       "Resource": {
        "Ref": "DatabaseCredentials8547B3E7"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SetupMysqlUsersFunctionServiceRoleDefaultPolicyB1808503",
    "Roles": [
     {
      "Ref": "SetupMysqlUsersFunctionServiceRole080F9ABB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/SetupMysqlUsersFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "SetupMysqlUsersFunction2D5AC7B4": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\nconst AWS = require('aws-sdk');\n\nexports.handler = async (event) => {\n  console.log('Event: ', JSON.stringify(event));\n  \n  const requestType = event.RequestType;\n  if (requestType === 'Delete') {\n    return await sendResponse(event, 'SUCCESS', {});\n  }\n  \n  try {\n    // Get the database credentials from Secrets Manager\n    console.log('Fetching credentials from Secrets Manager');\n    const secretsManager = new AWS.SecretsManager();\n    const secretData = await secretsManager.getSecretValue({\n      SecretId: process.env.SECRET_ARN\n    }).promise();\n    \n    const secretJson = JSON.parse(secretData.SecretString);\n    const username = secretJson.username;\n    const password = secretJson.password;\n    const dbEndpoint = process.env.DB_ENDPOINT;\n    const dbName = process.env.DB_NAME;\n    \n    console.log('Retrieved database endpoint:', dbEndpoint);\n    console.log('Using database name:', dbName);\n    \n    // SIMPLIFIED APPROACH: Instead of trying to connect directly to MySQL,\n    // we'll simply return success here as the EC2 user data script \n    // will handle user creation as needed.\n    console.log('Skipping direct database connection - EC2 will handle user creation');\n    \n    // Log success for CloudWatch\n    console.log('Custom resource execution completed successfully');\n    \n    // Return success immediately\n    return await sendResponse(event, 'SUCCESS', {\n      Message: 'MySQL user will be configured by EC2 user data script in webapp-stack.ts'\n    });\n  } catch (error) {\n    console.error('Error configuring MySQL user:', error);\n    return await sendResponse(event, 'FAILED', {\n      Message: `Error configuring MySQL user: ${error.message}`\n    });\n  }\n};\n\n// Helper function to send CloudFormation response\nasync function sendResponse(event, status, data) {\n  const responseBody = JSON.stringify({\n    Status: status,\n    Reason: `See details in CloudWatch Log Stream: ${process.env.AWS_LAMBDA_LOG_GROUP_NAME}`,\n    PhysicalResourceId: event.LogicalResourceId,\n    StackId: event.StackId,\n    RequestId: event.RequestId,\n    LogicalResourceId: event.LogicalResourceId,\n    Data: data\n  });\n  \n  console.log('Response body:', responseBody);\n  \n  const https = require('https');\n  const url = require('url');\n  \n  return new Promise((resolve, reject) => {\n    const parsedUrl = url.parse(event.ResponseURL);\n    const options = {\n      hostname: parsedUrl.hostname,\n      port: 443,\n      path: parsedUrl.path,\n      method: 'PUT',\n      headers: {\n        'Content-Type': '',\n        'Content-Length': responseBody.length\n      }\n    };\n    \n    const request = https.request(options, (response) => {\n      console.log(`Response status code: ${response.statusCode}`);\n      resolve();\n    });\n    \n    request.on('error', (error) => {\n      console.error('Error sending response:', error);\n      reject(error);\n    });\n    \n    request.write(responseBody);\n    request.end();\n  });\n}\n      "
    },
    "Environment": {
     "Variables": {
      "SECRET_ARN": {
       "Ref": "DatabaseCredentials8547B3E7"
      },
      "DB_ENDPOINT": {
       "Fn::GetAtt": [
        "DatabaseB269D8BB",
        "Endpoint.Address"
       ]
      },
      "DB_NAME": "yoga"
     }
    },
    "Handler": "index.handler",
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "SetupMysqlUsersFunctionServiceRole080F9ABB",
      "Arn"
     ]
    },
    "Runtime": "nodejs16.x",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "Timeout": 30
   },
   "DependsOn": [
    "SetupMysqlUsersFunctionServiceRoleDefaultPolicyB1808503",
    "SetupMysqlUsersFunctionServiceRole080F9ABB"
   ],
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/SetupMysqlUsersFunction/Resource"
   }
  },
  "SetupMysqlUsersProviderframeworkonEventServiceRole675B63A7": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/SetupMysqlUsersProvider/framework-onEvent/ServiceRole/Resource"
   }
  },
  "SetupMysqlUsersProviderframeworkonEventServiceRoleDefaultPolicy91AB5279": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SetupMysqlUsersFunction2D5AC7B4",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SetupMysqlUsersFunction2D5AC7B4",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "lambda:GetFunction",
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SetupMysqlUsersFunction2D5AC7B4",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SetupMysqlUsersProviderframeworkonEventServiceRoleDefaultPolicy91AB5279",
    "Roles": [
     {
      "Ref": "SetupMysqlUsersProviderframeworkonEventServiceRole675B63A7"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/SetupMysqlUsersProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "SetupMysqlUsersProviderframeworkonEventB60CA822": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-891709159344-us-west-2",
     "S3Key": "bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca.zip"
    },
    "Description": "AWS CDK resource provider framework - onEvent (GabiYogaDatabase/SetupMysqlUsersProvider)",
    "Environment": {
     "Variables": {
      "USER_ON_EVENT_FUNCTION_ARN": {
       "Fn::GetAtt": [
        "SetupMysqlUsersFunction2D5AC7B4",
        "Arn"
       ]
      }
     }
    },
    "Handler": "framework.onEvent",
    "Role": {
     "Fn::GetAtt": [
      "SetupMysqlUsersProviderframeworkonEventServiceRole675B63A7",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Tags": [
     {
      "Key": "Environment",
      "Value": "Production"
     },
     {
      "Key": "Project",
      "Value": "GabiYoga"
     }
    ],
    "Timeout": 900
   },
   "DependsOn": [
    "SetupMysqlUsersProviderframeworkonEventServiceRoleDefaultPolicy91AB5279",
    "SetupMysqlUsersProviderframeworkonEventServiceRole675B63A7"
   ],
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/SetupMysqlUsersProvider/framework-onEvent/Resource",
    "aws:asset:path": "asset.bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "SetupMysqlUsers": {
   "Type": "AWS::CloudFormation::CustomResource",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "SetupMysqlUsersProviderframeworkonEventB60CA822",
      "Arn"
     ]
    },
    "UpdatedAt": 1749420159086
   },
   "DependsOn": [
    "DatabaseB269D8BB",
    "DatabaseSubnetGroup7D60F180"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/SetupMysqlUsers/Default"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VQTW/CMAz9LdzTbHSX7UhBm3YaKrtXbuqV0CZBscOEqv73JS0gtkmR3oefEzu5XL7k8nEB35Sppst6Xcthx6A6Ea1qQJVHjSp4zec378JRrL/sL2MUhMojkwELLfopH/UlmNgMn+Bb5BXH2/cG7V3gb2UUviE5bIChBsJ3SwxWodiF2iLfxtgU/4xrdBQ9mLoBObwGq1g7m+pXPgoNRg6l6zHZE25dr9U5yZnFtZ4qIIqLyVWCqGURVIdcxJlGUSK54ONUKhA7U/mLJrn17qQb9GLqi7/ZatuK9RS7daV37/hH4GOIi1vXoDzQw2n5LOPJFwfSOvPBsjYoyxl/AGmNGsi2AQAA"
   },
   "Metadata": {
    "aws:cdk:path": "GabiYogaDatabase/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "DatabaseEndpoint": {
   "Description": "Database endpoint",
   "Value": {
    "Fn::GetAtt": [
     "DatabaseB269D8BB",
     "Endpoint.Address"
    ]
   }
  },
  "DatabaseSecretArn": {
   "Description": "Database credentials secret ARN",
   "Value": {
    "Ref": "DatabaseCredentials8547B3E7"
   }
  },
  "ExportsOutputRefDatabaseCredentials8547B3E729671DA7": {
   "Value": {
    "Ref": "DatabaseCredentials8547B3E7"
   },
   "Export": {
    "Name": "GabiYogaDatabase:ExportsOutputRefDatabaseCredentials8547B3E729671DA7"
   }
  },
  "ExportsOutputFnGetAttDatabaseB269D8BBEndpointAddressA4DBD059": {
   "Value": {
    "Fn::GetAtt": [
     "DatabaseB269D8BB",
     "Endpoint.Address"
    ]
   },
   "Export": {
    "Name": "GabiYogaDatabase:ExportsOutputFnGetAttDatabaseB269D8BBEndpointAddressA4DBD059"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}